import PDFDocument from 'pdfkit';

export const generatePDF = async (items) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const chunks = [];

      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));

      // Header
      doc.fontSize(20).text('Inventory Report', { align: 'center' });
      doc.fontSize(12).text(`Generated on: ${new Date().toLocaleDateString()}`, { align: 'center' });
      doc.moveDown(2);

      // Summary
      const totalItems = items.length;
      const totalValue = items.reduce((sum, item) => sum + (item.total_value || 0), 0);
      const lowStockItems = items.filter(item => item.quantity <= item.min_quantity).length;

      doc.fontSize(14).text('Summary:', { underline: true });
      doc.fontSize(12)
         .text(`Total Items: ${totalItems}`)
         .text(`Total Value: $${totalValue.toFixed(2)}`)
         .text(`Low Stock Items: ${lowStockItems}`)
         .moveDown();

      // Table header
      const tableTop = doc.y;
      const itemHeight = 20;
      
      doc.fontSize(10).font('Helvetica-Bold');
      doc.text('Name', 50, tableTop);
      doc.text('SKU', 150, tableTop);
      doc.text('Category', 220, tableTop);
      doc.text('Qty', 290, tableTop);
      doc.text('Unit Price', 330, tableTop);
      doc.text('Total Value', 400, tableTop);
      doc.text('Location', 480, tableTop);

      // Draw header line
      doc.moveTo(50, tableTop + 15)
         .lineTo(550, tableTop + 15)
         .stroke();

      // Table rows
      doc.font('Helvetica');
      let currentY = tableTop + 25;

      items.forEach((item, index) => {
        if (currentY > 700) {
          doc.addPage();
          currentY = 50;
        }

        doc.text(item.name?.substring(0, 15) || '', 50, currentY);
        doc.text(item.sku || '', 150, currentY);
        doc.text(item.category?.substring(0, 10) || '', 220, currentY);
        doc.text(item.quantity?.toString() || '0', 290, currentY);
        doc.text(`$${(item.unit_price || 0).toFixed(2)}`, 330, currentY);
        doc.text(`$${(item.total_value || 0).toFixed(2)}`, 400, currentY);
        doc.text(item.location?.substring(0, 12) || '', 480, currentY);

        currentY += itemHeight;

        // Add line every 5 rows
        if ((index + 1) % 5 === 0) {
          doc.moveTo(50, currentY - 5)
             .lineTo(550, currentY - 5)
             .stroke();
        }
      });

      // Footer
      doc.fontSize(8)
         .text(`Report generated by WMS - Page ${doc.bufferedPageRange().count}`, 
                50, doc.page.height - 50, { align: 'center' });

      doc.end();

    } catch (error) {
      reject(error);
    }
  });
};